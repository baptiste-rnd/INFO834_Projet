services:
  mongo1:
    image: mongo:latest
    container_name: mongo1
    hostname: mongo1
    ports:
      - "27017:27017"
    command: --replSet rs0 --bind_ip_all

  mongo2:
    image: mongo:latest
    container_name: mongo2
    hostname: mongo2
    ports:
      - "27018:27017"
    command: --replSet rs0 --bind_ip_all

  mongo3:
    image: mongo:latest
    container_name: mongo3
    hostname: mongo3
    ports:
      - "27019:27017"
    command: --replSet rs0 --bind_ip_all

  mongo-arbiter:
    image: mongo:latest
    container_name: mongo-arbiter
    hostname: mongo-arbiter
    ports:
      - "27020:27017"
    command: --replSet rs0 --bind_ip_all

  mongo-setup:
    image: mongo:latest
    container_name: mongo-setup
    depends_on:
      - mongo1
      - mongo2
      - mongo3
      - mongo-arbiter
    volumes:
      - ./init-mongo.js:/init-mongo.js
    entrypoint: >
      bash -c "
        echo '‚è≥ Waiting for MongoDB instances to be ready...';
        sleep 3;

        # Step 1: Initiate ReplicaSet
        echo 'üöÄ Initiating ReplicaSet...';
        mongosh --host mongo1 --eval 'rs.initiate()';

        echo '‚è≥ Waiting for PRIMARY election...';
        sleep 3;

        # Step 2: Set default RW concern explicitly (this avoids the reconfig error)
        mongosh --host mongo1 --eval '
          db.adminCommand({
            setDefaultRWConcern: 1,
            defaultWriteConcern: { w: \"majority\", wtimeout: 0 },
            defaultReadConcern: { level: \"local\" }
          });
        ';

        echo '‚úÖ Default read/write concern set!';

        # Step 3: Get current config and reconfigure with members
        mongosh --host mongo1 --eval '
          cfg = rs.conf();
          cfg.members = [
            { _id: 0, host: \"mongo1:27017\" },
            { _id: 1, host: \"mongo2:27017\" },
            { _id: 2, host: \"mongo3:27017\" },
            { _id: 3, host: \"mongo-arbiter:27017\", arbiterOnly: true }
          ];
          rs.reconfig(cfg, { force: true });
        ';

        echo '‚úÖ ReplicaSet configured!';

        # Step 4: Wait before running init script
        sleep 3;

        # Step 5: Run initialization script
        mongosh --host mongo1 /init-mongo.js;

        echo '‚úÖ MongoDB Initialization complete!';
      "

  redis:
    image: redis:latest
    container_name: redisdb
    ports:
    - "6379:6379"

  nodejs:
    build: ../api
    container_name: nodejs_app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    volumes:
      - ../web:/app/public
    command: npm start
    depends_on:
      - mongo1
      - redis

